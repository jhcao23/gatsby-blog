{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/index.tsx"],"names":["Bio","style","display","marginBottom","rhythm","BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","author","avatar","map","node","frontmatter","fields","slug","key","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"6FAAA,qCA6DeA,IAjDH,WAyBV,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,U,kCCzC7B,sIAgFeC,UAvCG,SAAC,GAAwC,IAAtCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAC/BC,EAAST,EAAKG,KAAKC,aAAaK,OAChCC,EAASV,EAAKU,OACpB,OACE,kBAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,EAAWQ,OAAQA,EAAQD,OAAQA,GACpE,kBAAC,IAAD,CAAKJ,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMK,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OACE,6BAASC,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACEpB,MAAO,CACLE,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMH,MAAO,CAAEsB,UAAW,QAAUC,GAAIN,EAAKE,OAAOC,MACjDV,IAGL,+BAAQO,EAAKC,YAAYM,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQT,EAAKC,YAAYS,aAAeV,EAAKW,kBAaxD,IAAMC,EAAY","file":"component---src-pages-index-tsx-751a04ebf1e906292cdb.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\n// import { useStaticQuery, graphql } from \"gatsby\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  // const data = useStaticQuery(graphql`\n  //   query BioQuery {\n  //     avatar: file(absolutePath: { regex: \"/profilepic.jpg/\" }) {\n  //       childImageSharp {\n  //         fixed(width: 50, height: 50) {\n  //           ...GatsbyImageSharpFixed\n  //         }\n  //       }\n  //     }\n  //     site {\n  //       siteMetadata {\n  //         author {\n  //           name\n  //           summary\n  //         }\n  //         social {\n  //           twitter\n  //         }\n  //       }\n  //     }\n  //   }\n  // `)\n\n  // const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      {/*<Image*/}\n      {/*  fixed={data.avatar.childImageSharp.fixed}*/}\n      {/*  alt={author.name}*/}\n      {/*  style={{*/}\n      {/*    marginRight: rhythm(1 / 2),*/}\n      {/*    marginBottom: 0,*/}\n      {/*    minWidth: 50,*/}\n      {/*    borderRadius: `100%`,*/}\n      {/*  }}*/}\n      {/*  imgStyle={{*/}\n      {/*    borderRadius: `50%`,*/}\n      {/*  }}*/}\n      {/*/>*/}\n    </div>\n  )\n}\n\nexport default Bio\n","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\ntype Data = {\n  avatar: {\n    childImageSharp: {\n      fixed: boolean\n    }\n  }\n  site: {\n    siteMetadata: {\n      title: string\n      author: {\n        name: string\n        summary: string\n      }\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          description: string\n        }\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  const author = data.site.siteMetadata.author\n  const avatar = data.avatar\n  return (\n    <Layout location={location} title={siteTitle} avatar={avatar} author={author}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    avatar: file(absolutePath: { regex: \"/logo.png/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n    }\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}